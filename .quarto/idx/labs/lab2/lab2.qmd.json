{"title":"Lab 2 Report","markdown":{"yaml":{"title":"Lab 2 Report","author":"Erin Wang","date":"9/9/2025"},"headingText":"Lab Hours","containsRefs":false,"markdown":"\nI spent 20 hours on this lab.\n\n## Introduction\nLab 2 involved learning time multiplexing and application of PNP transistors to efficiently use the I/O on the FPGA by using one module and two 4 DIP switch inputs to control a dual 7-segment display on a breadboard. The lab also involved displaying the sum of the two inputs onto external LEDs. \n\n## Design and Testing Methodology\n\n### Dual Display with one 7-Segment Module\nIn order to display two independent hexadecimal numbers on the dual 7-segment display using only one `sevseg` module, the trick was to send the same output to both digits but alternate between turning on the first digit and the second digit fast enough that the different digits are seen at the same time to our eyes (~60 Hz). To alternate between the two, the on-board high-speed oscillator (HSOSC) from the iCE40 UltraPlus primitive library was used to generate a clock signal at 24 MHz then a counter was used to divide the high frequency clock signal into a 60 Hz signal.\n\n\n![The calculation for the counter to make the inputs and output powers alternate at 60 Hz.](images/lab2_countercalc.jpg){#fig-countercalc}\n\nThe calculation in @fig-countercalc derived that the counter needed to reach 200000 before setting the multiplexer select HIGH in order switch between the two inputs and turning on the two outputs at 60 Hz. For example, if the first digit should read 1 and then second digit should read 5, then when `clk` is `LOW`, the program takes 1 as the input and sends 1 to both digits' outputs. Then, the program turns only the first digit's power on and turns the other digit's power off. When `clk` is `HIGH`, the program takes 5 as the input and sends 5 to both digits' outputs. Then the program turns the second digit's power on and turns the first digit's power off. This switch happens fast enough that the human eye sees both individual digits on the display. \n\n### Resistor choice for 7-segment Display\n![The calculation for the 7-segment current-limiting resistors using a V_f of 1.9V from the MAN4600 datasheet.](images/lab2_sevsegcalc.jpg){#fig-sevsegcalc}\n\nThe calculation in @fig-sevsegcalc derived 1kΩ as an appropriate resistor to provide ~1.2 mA to the LED segments of the 7-segment display. The drop in voltage from the emitter is due to the emitter saturation voltage. Thus the voltage going into the segment displays is 3.1 V. \n\n### Resistor choice for external LEDs\n![The calculation for the external LEDs current-limiting resistors using a V_f of 1.9V from the green LED datasheet.](images/lab2_ledcalc.jpg){#fig-ledcalc}\n\nThe calculation in @fig-ledcalc derived 1kΩ as an appropriate resistor to provide ~1.4 mA to the external LEDs. The calculation is the same as for the 7-segment display, however the cathodes of the LEDs are connected to ground rather than to a pin. \n\n### Resistor choice for transistors\n![The calculation for the transistor current-limiting resistors using a V_f of 0.7V for the emitter diode such that the base voltage is 2.6V.](images/lab2_transcalc.jpg){#fig-transcalc}\n\nThe calculation in @fig-transcalc derived 2.7kΩ as an appropriate resistor (stock-room available) to provide less than 1 mA to FPGA I/O pins.\n\n## Technical Documentation\nThe source code for the project can be found in the associated [Github repository](https://github.com/erinlywang/e155-lab2)\n\n### Block Diagram\n![Block diagram showing the top module and the three submodules `HSOSC`, `mpx`, and `sevseg`.](images/lab2_block.jpg){#fig-block}\n\nThe block diagram in @fig-block demonstrates the overall architecture of the design. The top-level module `top` includes three submodules: the high-speed oscillator block (`HSOSC`), the multiplexer to alternate at 60 Hz (`mpx`), and the 7-segment display module from Lab 1 (`sevseg`). The programming for the LED sum and the multiplexer logic using the `select` output of `mpx`  were placed in the `top` module. \n\n## Schematic\n![Schematic of the layout not including the SW6 switch or the reset button (P43). The diodes of each digit of the 7-segment display share a common anode.](images/lab2_schematic.jpg){#fig-schematic}\n\n@fig-schematic shows the physical layout of the design. An internal 100 kΩ pullup resistor was used to ensure the active low reset pin for the switches was not floating. The output 7-segment diodes were connected using a 1kΩ current-limiting resistor to ensure the output current (~1.4 mA) did not exceed the maximum output current of the FPGA I/O pins. The external LED diodes (green) were connected using a 1kΩ current-limiting resistor to ensure the output current (~1.4 mA) did not exceed the maximum output current of the LEDs. The figure also shows which pin number of the dual display corresponds to which segment (i.e. A1,A2,B1, B2...) of the 7-segment display.\n\n![Diagram of the letter assignment for the 7-segment display.](images/seven_seg_map.png){#fig-sevsegletters}\n\n@fig-sevsegletters depicts the assignment of letters to a digit of the output display. In the program, seg[0] corresponds to a, seg[1] to b, and so on. \n\n## Results and Discussion\n\n### Testbench Simulation\n#### `top` Module\n![Testbench simulation results for top module showing the HSOSC toggling. The simulation shows outputs match expected outputs for all asserts](images/lab2_tbtopHSOSC.png){#fig-tbtophsosc}\n\nThe design met all intended design objectives. @fig-tbtophsosc shows a screenshot of the QuestaSim simulation for the `top` module's testbench `tb_top` after approximately `#10000` time units to show that the `HSOSC` toggles. \n\n![Testbench simulation results for top module showing the outputs for the LED. The simulation shows the LED outputs match expected outputs for all asserts](images/lab2_tbtopLED.png){#fig-tbtopled}\n\nAs shown in @fig-tbtopled, the simulated outputs of `led` match the `ledexpected` output. Note that not all the tested inputs of `led` are shown in this image. The outputs of `top`: `seg`, `trans0`, and `trans1` are not tested in this testbench because they rely on the `mpx` module which uses the `HSOSC` clock to provide the transistor output and switch input into `sevseg`. The outputs for `seg` are tested in the `sevseg` testbench while `trans0` and `trans1` and the switch input into `sevseg` are tested in the `mpx` testbench. \n\n#### `sevseg` Module\n![Testbench simulation results for the sevseg module. The simulation shows outputs match expected outputs for all testvectors](images/lab2_tbsevseg.png){#fig-tbsevseg}\n\n@fig-tbsevseg shows a screenshot of the QuestaSim simulation for the `sevseg` module's testbench `tb_sevseg`. The simulated outputs of `seg` match the expected outputs. \n\n#### `mpx` Module\n![Testbench simulation results for the mpx module for before the flip. The simulation shows outputs match expected outputs for all asserts](images/lab2_tbmpxCOUNTLOW.png){#fig-tbmpx0}\n\n@fig-tbmpx0 shows a screenshot of the QuestaSim simulation for the `mpx` module's testbench `tb_mpx` to test that the `s`, `trans0`, and `trans1` output matches the expected outputs for before the alternation (aka flip) at `counter = 200000`. Because we are before the flip, `s` should be the same as the `s0` input and `trans0` and `trans1` should be 0 and 1 respectively. The simulated outputs of `mpx` match the expected outputs for before the flip and the counter is counting up. \n\n![Testbench simulation results for the mpx module for after the flip. The simulation shows outputs match expected outputs for all testvectors](images/lab2_tbmpxCOUNTHIGH.png){#fig-tbmpx1}\n\n@fig-tbmpx1 shows a screenshot of the QuestaSim simulation for the `mpx` module's testbench `tb_mpx` to test that the `s`, `trans0`, and `trans1` output matches the expected outputs for after the alternation (aka flip) that should occur when the counter reaches 200000. Because we are after the flip, `s` should be the same as the `s1` input and `trans0` and `trans1` should be 1 and 0 respectively. The simulated outputs of `mpx` match the expected outputs for after the flip and the flip happens when the counter reaches 200000. The reset of the counter after `count` reaches 200000 is also visualized.\n\n## Conclusion\n\nThe design successfully displayed two individual digits on the dual 7-segment display using only one `sevseg` module. The 5 LEDs also successfully display the sum of the two inputs. There is no bleeding between the digits or flickering and the 7-segment display does not dim depending on which numbers are displayed. The digits are also upright to the viewer. \n\n## AI Prototype and Reflection\n### Without Lab 1 Files Provided\nOff the bat I already recognized the Claude Ai put multiple modules in one file and the testbench module in another file. When trying to synthesize the code, there was an error in the testbench module. The testbench had two `initial` statements. The first `initial` statement housed the error of `loop count limit exceeded forever never breaks`. This is because the AI had setup the clock with the following code:\n\n```\ninitial begin\n    clk = 0;\n    forever #5 clk = ~clk;\nend\n```\n\nThis block of code is notably different from how I implement a clock. I use an `always` statement instead of `initial` to setup the clock.\n\nJust attempting to synthesize without including the testbench in implementation does work! Looking at the`seven_seg_decoder` module from the AI, the `case` statement looks like mine, accomodating for the common anode by having 1 as `LOW` and 0 as `HIGH` for the display. There is however no `default` case which could be a problem for debugging. The `seven_seg_mux` module uses the same clock divider setup as the provided example on the E155 website by using a counter and setting the multiplexer's select to the last bit. What's more strikingly different is that the input multiplexer code is an `always_comb` statement whereas I used the syntax for a multiplexer of `select ? in1:in0`. The AI also used an `always_ff` statement for the output demultiplexer with latches by turning the output to either all segments off or all segments on. However, we were told explicitly not to use latches and to use PNP transistors to control the anode power. \n\n### With Lab 1 Files Provided\nWith the Lab 1 files provided, the AI did not provide a testbench. The code was much shorter than without the Lab 1 files. The code does use HSOSC immediately which is different from the Lab 1 AI Prototype. For the time multiplexing, the AI created a clock divider to toggle at 1200 Hz. This seems a little high to me as a computer screen is around 60 Hz. Such high frequency could cause some bleeding between digits. The code for the multiplexer select is how I did the select in my code where the counter resets and the mux select switches to its opposite logic after a certain number of counts. The input multiplexer code was still an `always_comb` statement rather than the `select ? in1:in0` format. The code then uses my `sevensegment` module to input the switch chosen from the `always_comb` statement and outputs the segments to turn on. The AI this time uses an `always_comb` for the output demultiplexer to use the multiplexer select from the clock divider to choose whether to make the first digit active and the second display off or vice versa. The `default` display is that both displays are off. \n\nThe code also provides a small section to use LEDs to check which display is active, check when the two inputs differ, and to blink at the frequency of the clock divider. \n\nOverall, I think both codes are very high quality although may be a little wordy considering mux logic can be much shorter than an `always_comb` statement. The code was interesting to compare as we didn't specify to the AI to send an output to PNP transistors to control which digit was on and I think the prototype had a clever way of sending the output to the LED segments. ","srcMarkdownNoYaml":"\n## Lab Hours\nI spent 20 hours on this lab.\n\n## Introduction\nLab 2 involved learning time multiplexing and application of PNP transistors to efficiently use the I/O on the FPGA by using one module and two 4 DIP switch inputs to control a dual 7-segment display on a breadboard. The lab also involved displaying the sum of the two inputs onto external LEDs. \n\n## Design and Testing Methodology\n\n### Dual Display with one 7-Segment Module\nIn order to display two independent hexadecimal numbers on the dual 7-segment display using only one `sevseg` module, the trick was to send the same output to both digits but alternate between turning on the first digit and the second digit fast enough that the different digits are seen at the same time to our eyes (~60 Hz). To alternate between the two, the on-board high-speed oscillator (HSOSC) from the iCE40 UltraPlus primitive library was used to generate a clock signal at 24 MHz then a counter was used to divide the high frequency clock signal into a 60 Hz signal.\n\n\n![The calculation for the counter to make the inputs and output powers alternate at 60 Hz.](images/lab2_countercalc.jpg){#fig-countercalc}\n\nThe calculation in @fig-countercalc derived that the counter needed to reach 200000 before setting the multiplexer select HIGH in order switch between the two inputs and turning on the two outputs at 60 Hz. For example, if the first digit should read 1 and then second digit should read 5, then when `clk` is `LOW`, the program takes 1 as the input and sends 1 to both digits' outputs. Then, the program turns only the first digit's power on and turns the other digit's power off. When `clk` is `HIGH`, the program takes 5 as the input and sends 5 to both digits' outputs. Then the program turns the second digit's power on and turns the first digit's power off. This switch happens fast enough that the human eye sees both individual digits on the display. \n\n### Resistor choice for 7-segment Display\n![The calculation for the 7-segment current-limiting resistors using a V_f of 1.9V from the MAN4600 datasheet.](images/lab2_sevsegcalc.jpg){#fig-sevsegcalc}\n\nThe calculation in @fig-sevsegcalc derived 1kΩ as an appropriate resistor to provide ~1.2 mA to the LED segments of the 7-segment display. The drop in voltage from the emitter is due to the emitter saturation voltage. Thus the voltage going into the segment displays is 3.1 V. \n\n### Resistor choice for external LEDs\n![The calculation for the external LEDs current-limiting resistors using a V_f of 1.9V from the green LED datasheet.](images/lab2_ledcalc.jpg){#fig-ledcalc}\n\nThe calculation in @fig-ledcalc derived 1kΩ as an appropriate resistor to provide ~1.4 mA to the external LEDs. The calculation is the same as for the 7-segment display, however the cathodes of the LEDs are connected to ground rather than to a pin. \n\n### Resistor choice for transistors\n![The calculation for the transistor current-limiting resistors using a V_f of 0.7V for the emitter diode such that the base voltage is 2.6V.](images/lab2_transcalc.jpg){#fig-transcalc}\n\nThe calculation in @fig-transcalc derived 2.7kΩ as an appropriate resistor (stock-room available) to provide less than 1 mA to FPGA I/O pins.\n\n## Technical Documentation\nThe source code for the project can be found in the associated [Github repository](https://github.com/erinlywang/e155-lab2)\n\n### Block Diagram\n![Block diagram showing the top module and the three submodules `HSOSC`, `mpx`, and `sevseg`.](images/lab2_block.jpg){#fig-block}\n\nThe block diagram in @fig-block demonstrates the overall architecture of the design. The top-level module `top` includes three submodules: the high-speed oscillator block (`HSOSC`), the multiplexer to alternate at 60 Hz (`mpx`), and the 7-segment display module from Lab 1 (`sevseg`). The programming for the LED sum and the multiplexer logic using the `select` output of `mpx`  were placed in the `top` module. \n\n## Schematic\n![Schematic of the layout not including the SW6 switch or the reset button (P43). The diodes of each digit of the 7-segment display share a common anode.](images/lab2_schematic.jpg){#fig-schematic}\n\n@fig-schematic shows the physical layout of the design. An internal 100 kΩ pullup resistor was used to ensure the active low reset pin for the switches was not floating. The output 7-segment diodes were connected using a 1kΩ current-limiting resistor to ensure the output current (~1.4 mA) did not exceed the maximum output current of the FPGA I/O pins. The external LED diodes (green) were connected using a 1kΩ current-limiting resistor to ensure the output current (~1.4 mA) did not exceed the maximum output current of the LEDs. The figure also shows which pin number of the dual display corresponds to which segment (i.e. A1,A2,B1, B2...) of the 7-segment display.\n\n![Diagram of the letter assignment for the 7-segment display.](images/seven_seg_map.png){#fig-sevsegletters}\n\n@fig-sevsegletters depicts the assignment of letters to a digit of the output display. In the program, seg[0] corresponds to a, seg[1] to b, and so on. \n\n## Results and Discussion\n\n### Testbench Simulation\n#### `top` Module\n![Testbench simulation results for top module showing the HSOSC toggling. The simulation shows outputs match expected outputs for all asserts](images/lab2_tbtopHSOSC.png){#fig-tbtophsosc}\n\nThe design met all intended design objectives. @fig-tbtophsosc shows a screenshot of the QuestaSim simulation for the `top` module's testbench `tb_top` after approximately `#10000` time units to show that the `HSOSC` toggles. \n\n![Testbench simulation results for top module showing the outputs for the LED. The simulation shows the LED outputs match expected outputs for all asserts](images/lab2_tbtopLED.png){#fig-tbtopled}\n\nAs shown in @fig-tbtopled, the simulated outputs of `led` match the `ledexpected` output. Note that not all the tested inputs of `led` are shown in this image. The outputs of `top`: `seg`, `trans0`, and `trans1` are not tested in this testbench because they rely on the `mpx` module which uses the `HSOSC` clock to provide the transistor output and switch input into `sevseg`. The outputs for `seg` are tested in the `sevseg` testbench while `trans0` and `trans1` and the switch input into `sevseg` are tested in the `mpx` testbench. \n\n#### `sevseg` Module\n![Testbench simulation results for the sevseg module. The simulation shows outputs match expected outputs for all testvectors](images/lab2_tbsevseg.png){#fig-tbsevseg}\n\n@fig-tbsevseg shows a screenshot of the QuestaSim simulation for the `sevseg` module's testbench `tb_sevseg`. The simulated outputs of `seg` match the expected outputs. \n\n#### `mpx` Module\n![Testbench simulation results for the mpx module for before the flip. The simulation shows outputs match expected outputs for all asserts](images/lab2_tbmpxCOUNTLOW.png){#fig-tbmpx0}\n\n@fig-tbmpx0 shows a screenshot of the QuestaSim simulation for the `mpx` module's testbench `tb_mpx` to test that the `s`, `trans0`, and `trans1` output matches the expected outputs for before the alternation (aka flip) at `counter = 200000`. Because we are before the flip, `s` should be the same as the `s0` input and `trans0` and `trans1` should be 0 and 1 respectively. The simulated outputs of `mpx` match the expected outputs for before the flip and the counter is counting up. \n\n![Testbench simulation results for the mpx module for after the flip. The simulation shows outputs match expected outputs for all testvectors](images/lab2_tbmpxCOUNTHIGH.png){#fig-tbmpx1}\n\n@fig-tbmpx1 shows a screenshot of the QuestaSim simulation for the `mpx` module's testbench `tb_mpx` to test that the `s`, `trans0`, and `trans1` output matches the expected outputs for after the alternation (aka flip) that should occur when the counter reaches 200000. Because we are after the flip, `s` should be the same as the `s1` input and `trans0` and `trans1` should be 1 and 0 respectively. The simulated outputs of `mpx` match the expected outputs for after the flip and the flip happens when the counter reaches 200000. The reset of the counter after `count` reaches 200000 is also visualized.\n\n## Conclusion\n\nThe design successfully displayed two individual digits on the dual 7-segment display using only one `sevseg` module. The 5 LEDs also successfully display the sum of the two inputs. There is no bleeding between the digits or flickering and the 7-segment display does not dim depending on which numbers are displayed. The digits are also upright to the viewer. \n\n## AI Prototype and Reflection\n### Without Lab 1 Files Provided\nOff the bat I already recognized the Claude Ai put multiple modules in one file and the testbench module in another file. When trying to synthesize the code, there was an error in the testbench module. The testbench had two `initial` statements. The first `initial` statement housed the error of `loop count limit exceeded forever never breaks`. This is because the AI had setup the clock with the following code:\n\n```\ninitial begin\n    clk = 0;\n    forever #5 clk = ~clk;\nend\n```\n\nThis block of code is notably different from how I implement a clock. I use an `always` statement instead of `initial` to setup the clock.\n\nJust attempting to synthesize without including the testbench in implementation does work! Looking at the`seven_seg_decoder` module from the AI, the `case` statement looks like mine, accomodating for the common anode by having 1 as `LOW` and 0 as `HIGH` for the display. There is however no `default` case which could be a problem for debugging. The `seven_seg_mux` module uses the same clock divider setup as the provided example on the E155 website by using a counter and setting the multiplexer's select to the last bit. What's more strikingly different is that the input multiplexer code is an `always_comb` statement whereas I used the syntax for a multiplexer of `select ? in1:in0`. The AI also used an `always_ff` statement for the output demultiplexer with latches by turning the output to either all segments off or all segments on. However, we were told explicitly not to use latches and to use PNP transistors to control the anode power. \n\n### With Lab 1 Files Provided\nWith the Lab 1 files provided, the AI did not provide a testbench. The code was much shorter than without the Lab 1 files. The code does use HSOSC immediately which is different from the Lab 1 AI Prototype. For the time multiplexing, the AI created a clock divider to toggle at 1200 Hz. This seems a little high to me as a computer screen is around 60 Hz. Such high frequency could cause some bleeding between digits. The code for the multiplexer select is how I did the select in my code where the counter resets and the mux select switches to its opposite logic after a certain number of counts. The input multiplexer code was still an `always_comb` statement rather than the `select ? in1:in0` format. The code then uses my `sevensegment` module to input the switch chosen from the `always_comb` statement and outputs the segments to turn on. The AI this time uses an `always_comb` for the output demultiplexer to use the multiplexer select from the clock divider to choose whether to make the first digit active and the second display off or vice versa. The `default` display is that both displays are off. \n\nThe code also provides a small section to use LEDs to check which display is active, check when the two inputs differ, and to blink at the frequency of the clock divider. \n\nOverall, I think both codes are very high quality although may be a little wordy considering mux logic can be much shorter than an `always_comb` statement. The code was interesting to compare as we didn't specify to the AI to send an output to PNP transistors to control which digit was on and I think the prototype had a clever way of sending the output to the LED segments. "},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"lab2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":["cosmo","brand"],"math":{"method":"mathjax","options":{"autoNumber":"AMS"},"citations":true},"title":"Lab 2 Report","author":"Erin Wang","date":"9/9/2025"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}