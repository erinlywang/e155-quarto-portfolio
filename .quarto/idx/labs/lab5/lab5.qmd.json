{"title":"Lab 5 Report","markdown":{"yaml":{"title":"Lab 5 Report","author":"Erin Wang","date":"10/8/2025"},"headingText":"Lab Hours","containsRefs":false,"markdown":"\nI spent 20 hours on this lab.\n\n## Introduction\nLab 5 involved learning how to use interrupts to quickly and accurately sample inputs by calculating the velocity of a motor using quadrature encoders.  \n\n## Design and Testing Methodology\n\n### Computing Velocity\nFor using a 12V 150RPM motor, the pulses per revolution (PPR) was 408 according to the motor's datasheet (see @fig-motordata). In order to get the velocity in revolutions per second (RPS), a counter was used to find pulses per second (PPS). Because the lab uses quadrature encoder with an A signal and a B signal for the motor and the interrupt flag waves at the rising edge and falling edge of both A and B, the counter in my program counts how many flags were seen in a 1 second delay needs to divided by 4 in order to find the actual PPS:\n\n![TS-25GA370H 12V 150 RPM motor datasheet.](images/motordatasheet.jpg){#fig-motordata}\n\n$$\nPPS = \\frac{counter}{4}\n$$\n\nTo get RPS, the PPS then needs to account for how many pulses are in one revolution:\n\n$$\nRPS = \\frac{PPS}{PPR} = \\frac{PPS}{408}\n$$\n\nUsing the above calculations, I derived the speed in revolutions per second. However, for direction this depends on the which clock is leading. The interrupt `EXTI1` assumes input A is leading and thus if input A and B are not the same, that means this assumption is true, thus the clock is moving clockwise and the counter should be increased (CW is positive). If input A and B are the same, then the assumption is not true, thus the clock is moving counter-clockwise and the counter should be decreased (CCW is negative). The interrupt `EXTI2` assumes input B is leading and uses the same logic except if the inputs are the same then the clock if moving CCW, and if the inputs are not the same then the clock is moving CW. Having both interrupts is necessary in order to check the rising and falling edges of BOTH A and B inputs. \n\n### Checking Velocity at 12V\nSince the motor used is rated for 150 RPM at 12V, I can check that the measured and printed velocity is the same as the actual true velocity. If the motor is moving at 150 RPM this can be converted to RPS:\n\n$$\n RPS = \\frac{RPM}{60} = \\frac{150}{60} = 2.5 \\: rev/s\n$$\n\nThus, the measured velocity should be around 2.5 rev/s when the motor is powered at 12V. \n\n### Interrupts versus Manual Polling\nWhile interrupts stop the main loop from continuing until the interrupt task is done, manual polling happens in parallel or while the main loop is running. This means manual polling misses edges while the delay is running. The pulses the polling misses can be calculated using the motor's PPR. Using an oscilloscope on the quadrature encodings, I found the quadrature encoder signal was running at 1.86 kHz which is 1860 PPS. Using this I was able to find how many RPS we would miss in the manual polling. \n\n$$\n RPS_{lost} = \\frac{PPS_{quadrature}}{PPR} = \\frac{1860}{408} = 4.559 \\: rev/s\n$$\n\nThus, we would lose approximately 5 revolutions per second using manual polling. Because the interrupts capture every edge of the quadrature encoder and stops the main loop from running while the interrupt is handling the interrupt task, the interrupts provide the highest-resolution measurement of the velocity whereas the manual polling loses resolution. \n\n\n## Technical Documentation\nThe source code for the project can be found in the associated [Github repository](https://github.com/erinlywang/e155-lab5)\n\n## Schematic\n![Schematic of the layout including the STM and the motor. The motor is depicted simply as a block here.](images/lab5_schematic.jpg){#fig-schematic}\n\n@fig-schematic shows the physical layout of the design. The GPIOA pins PA1 and PA2 were chosen for their ability to handle the 5V output from the MCU into the motor. \n\n## Flow Chart\n![Flow chart of main function and two interrupt functions. Abstracted to only include high-level understandings.](images/lab5_flowchart.jpg){#fig-flow}\n\n@fig-flow shows the flow of the program including the main function and the interrupt functions for the A and B signals of the quadrature encoder. \n## Results and Discussion\n\n## Conclusion\n\nThe design successfully outputs the velocity with the correct direction with at least a 1 Hz update rate. The program measured the velocity to be 2.8 rev/s at 12V which is very close to our expected velocity of 2.5 rev/s. The program utilizes all edges of the quadrature encoders, does not miss any edges at high speeds, reports 0 when the fan is unmoving, and does not report 0 at low speeds (has high resolution). \n\nOverall a success!\n\n## AI Prototype and Reflection\nThe Claude AI did not pass on the first run. The program included the header `\"stm32l4xx_hal.h\"` which was not recognized by Segger. I asked the AI to instead use `<stm32l432xx.h>`. This change did create a buildable solution. However, there was no code to show the velocity anywhere. So I prompted the AI to output the velocity using printf. \n\nThe AI actually gave me two methods: one for Hardware Encoder Mode that uses TIM2 encoder interface and no interrupts and another for Software Encoder Mode that uses the EXTI interrupts like I did. Another fun thing the AI did was also find the position not just the velocity. To keep things simple I asked just for velocity and to use Method 2.\n\n<details> \n\n<summary>Method 2: Software Encoder Mode</summary>\n\n``` \n/* Quadrature Encoder Interface for STM32L432KC\n * GPIO Interrupt Mode - Velocity Only\n * Direct register access without HAL\n */\n\n#include <stm32l432xx.h>\n#include <stdio.h>\n\n/* ============================================\n * PRINTF RETARGET FOR SWO/ITM (ST-Link)\n * ============================================ */\n\nint _write(int file, char *ptr, int len)\n{\n    for(int i = 0; i < len; i++) {\n        ITM_SendChar((*ptr++));\n    }\n    return len;\n}\n\n/* ============================================\n * GPIO INTERRUPT MODE - VELOCITY CALCULATION\n * Software quadrature decoding using EXTI interrupts\n * Connect encoder to PA0 (Channel A) and PA1 (Channel B)\n * ============================================ */\n\n#define ENCODER_A_PIN 0\n#define ENCODER_B_PIN 1\n\nvolatile int32_t encoder_count = 0;\nvolatile int32_t encoder_velocity = 0;  // counts per second\nvolatile uint8_t last_state = 0;\n\nvoid Encoder_GPIO_Init(void)\n{\n    // Enable clocks for GPIOA and SYSCFG\n    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;\n    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;\n    \n    // Configure PA0 and PA1 as inputs\n    GPIOA->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);\n    \n    // Enable pull-ups\n    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);\n    GPIOA->PUPDR |= (GPIO_PUPDR_PUPD0_0 | GPIO_PUPDR_PUPD1_0);\n    \n    // Configure EXTI for PA0 and PA1\n    SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI0 | SYSCFG_EXTICR1_EXTI1);\n    // EXTI0 and EXTI1 connected to PA0 and PA1 (value 0 = GPIOA)\n    \n    // Enable rising and falling edge triggers\n    EXTI->RTSR1 |= (EXTI_RTSR1_RT0 | EXTI_RTSR1_RT1);\n    EXTI->FTSR1 |= (EXTI_FTSR1_FT0 | EXTI_FTSR1_FT1);\n    \n    // Unmask interrupts\n    EXTI->IMR1 |= (EXTI_IMR1_IM0 | EXTI_IMR1_IM1);\n    \n    // Enable NVIC interrupts\n    NVIC_SetPriority(EXTI0_IRQn, 2);\n    NVIC_EnableIRQ(EXTI0_IRQn);\n    \n    NVIC_SetPriority(EXTI1_IRQn, 2);\n    NVIC_EnableIRQ(EXTI1_IRQn);\n    \n    // Read initial state\n    last_state = ((GPIOA->IDR & (1 << ENCODER_A_PIN)) ? 2 : 0) | \n                 ((GPIOA->IDR & (1 << ENCODER_B_PIN)) ? 1 : 0);\n}\n\nvoid Encoder_Process(void)\n{\n    uint8_t current_state = ((GPIOA->IDR & (1 << ENCODER_A_PIN)) ? 2 : 0) | \n                            ((GPIOA->IDR & (1 << ENCODER_B_PIN)) ? 1 : 0);\n    \n    // State transition table for quadrature decoding\n    int8_t direction = 0;\n    uint8_t transition = (last_state << 2) | current_state;\n    \n    switch(transition) {\n        // Clockwise transitions\n        case 0b0001: case 0b0111: case 0b1110: case 0b1000:\n            direction = 1;\n            break;\n        // Counter-clockwise transitions\n        case 0b0010: case 0b1011: case 0b1101: case 0b0100:\n            direction = -1;\n            break;\n        // Invalid or no change\n        default:\n            direction = 0;\n            break;\n    }\n    \n    encoder_count += direction;\n    last_state = current_state;\n}\n\n// EXTI0 interrupt handler (Channel A on PA0)\nvoid EXTI0_IRQHandler(void)\n{\n    if(EXTI->PR1 & EXTI_PR1_PIF0) {\n        EXTI->PR1 = EXTI_PR1_PIF0;  // Clear pending bit\n        Encoder_Process();\n    }\n}\n\n// EXTI1 interrupt handler (Channel B on PA1)\nvoid EXTI1_IRQHandler(void)\n{\n    if(EXTI->PR1 & EXTI_PR1_PIF1) {\n        EXTI->PR1 = EXTI_PR1_PIF1;  // Clear pending bit\n        Encoder_Process();\n    }\n}\n\nvoid Encoder_CalculateVelocity(void)\n{\n    static int32_t last_count = 0;\n    int32_t current_count = encoder_count;\n    \n    // Calculate change in count (delta)\n    int32_t delta = current_count - last_count;\n    \n    // Velocity in counts per second (assuming 100ms sampling = 10 Hz)\n    encoder_velocity = delta * 10;\n    \n    last_count = current_count;\n}\n\nint32_t Encoder_GetVelocity(void)\n{\n    return encoder_velocity;\n}\n\n/* ============================================\n * SYSTICK TIMER FOR VELOCITY SAMPLING\n * ============================================ */\n\nvoid SysTick_Init(uint32_t ticks)\n{\n    SysTick->LOAD = ticks - 1;\n    SysTick->VAL = 0;\n    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | \n                    SysTick_CTRL_TICKINT_Msk | \n                    SysTick_CTRL_ENABLE_Msk;\n}\n\nvoid SysTick_Handler(void)\n{\n    // Calculate velocity every 100ms\n    Encoder_CalculateVelocity();\n}\n\n/* ============================================\n * USAGE EXAMPLE\n * ============================================ */\n\n// Simple delay function (adjust based on your clock speed)\nvoid delay_ms(uint32_t ms)\n{\n    for(uint32_t i = 0; i < ms * 4000; i++) {\n        __NOP();\n    }\n}\n\nint main(void)\n{\n    // Initialize GPIO interrupt mode encoder\n    Encoder_GPIO_Init();\n    \n    // Initialize SysTick for 100ms interrupts (assuming 4MHz clock)\n    // Adjust this value based on your actual system clock\n    SysTick_Init(400000);  // 4MHz / 10 = 400000 for 100ms\n    \n    while(1) {\n        // Read and print velocity only\n        int32_t velocity = Encoder_GetVelocity();  // counts per second\n        \n        printf(\"Velocity: %ld counts/sec\\r\\n\", velocity);\n        \n        delay_ms(100);\n    }\n}\n\n```\n</details> \n\nWhen I ran this in debug mode, the velocity was output as counts per second, but did not match the expected velocities. This is likely due to the integer nature of the variables in the Claude AI. The output would jump between 10 counts/sec to -10 counts/sec and sometimes 0 counts/sec in between. However, when the motor is stationary, the code does output 0 counts/sec correctly. Overall, the Claude AI was not very successful for this prompt. \n","srcMarkdownNoYaml":"\n## Lab Hours\nI spent 20 hours on this lab.\n\n## Introduction\nLab 5 involved learning how to use interrupts to quickly and accurately sample inputs by calculating the velocity of a motor using quadrature encoders.  \n\n## Design and Testing Methodology\n\n### Computing Velocity\nFor using a 12V 150RPM motor, the pulses per revolution (PPR) was 408 according to the motor's datasheet (see @fig-motordata). In order to get the velocity in revolutions per second (RPS), a counter was used to find pulses per second (PPS). Because the lab uses quadrature encoder with an A signal and a B signal for the motor and the interrupt flag waves at the rising edge and falling edge of both A and B, the counter in my program counts how many flags were seen in a 1 second delay needs to divided by 4 in order to find the actual PPS:\n\n![TS-25GA370H 12V 150 RPM motor datasheet.](images/motordatasheet.jpg){#fig-motordata}\n\n$$\nPPS = \\frac{counter}{4}\n$$\n\nTo get RPS, the PPS then needs to account for how many pulses are in one revolution:\n\n$$\nRPS = \\frac{PPS}{PPR} = \\frac{PPS}{408}\n$$\n\nUsing the above calculations, I derived the speed in revolutions per second. However, for direction this depends on the which clock is leading. The interrupt `EXTI1` assumes input A is leading and thus if input A and B are not the same, that means this assumption is true, thus the clock is moving clockwise and the counter should be increased (CW is positive). If input A and B are the same, then the assumption is not true, thus the clock is moving counter-clockwise and the counter should be decreased (CCW is negative). The interrupt `EXTI2` assumes input B is leading and uses the same logic except if the inputs are the same then the clock if moving CCW, and if the inputs are not the same then the clock is moving CW. Having both interrupts is necessary in order to check the rising and falling edges of BOTH A and B inputs. \n\n### Checking Velocity at 12V\nSince the motor used is rated for 150 RPM at 12V, I can check that the measured and printed velocity is the same as the actual true velocity. If the motor is moving at 150 RPM this can be converted to RPS:\n\n$$\n RPS = \\frac{RPM}{60} = \\frac{150}{60} = 2.5 \\: rev/s\n$$\n\nThus, the measured velocity should be around 2.5 rev/s when the motor is powered at 12V. \n\n### Interrupts versus Manual Polling\nWhile interrupts stop the main loop from continuing until the interrupt task is done, manual polling happens in parallel or while the main loop is running. This means manual polling misses edges while the delay is running. The pulses the polling misses can be calculated using the motor's PPR. Using an oscilloscope on the quadrature encodings, I found the quadrature encoder signal was running at 1.86 kHz which is 1860 PPS. Using this I was able to find how many RPS we would miss in the manual polling. \n\n$$\n RPS_{lost} = \\frac{PPS_{quadrature}}{PPR} = \\frac{1860}{408} = 4.559 \\: rev/s\n$$\n\nThus, we would lose approximately 5 revolutions per second using manual polling. Because the interrupts capture every edge of the quadrature encoder and stops the main loop from running while the interrupt is handling the interrupt task, the interrupts provide the highest-resolution measurement of the velocity whereas the manual polling loses resolution. \n\n\n## Technical Documentation\nThe source code for the project can be found in the associated [Github repository](https://github.com/erinlywang/e155-lab5)\n\n## Schematic\n![Schematic of the layout including the STM and the motor. The motor is depicted simply as a block here.](images/lab5_schematic.jpg){#fig-schematic}\n\n@fig-schematic shows the physical layout of the design. The GPIOA pins PA1 and PA2 were chosen for their ability to handle the 5V output from the MCU into the motor. \n\n## Flow Chart\n![Flow chart of main function and two interrupt functions. Abstracted to only include high-level understandings.](images/lab5_flowchart.jpg){#fig-flow}\n\n@fig-flow shows the flow of the program including the main function and the interrupt functions for the A and B signals of the quadrature encoder. \n## Results and Discussion\n\n## Conclusion\n\nThe design successfully outputs the velocity with the correct direction with at least a 1 Hz update rate. The program measured the velocity to be 2.8 rev/s at 12V which is very close to our expected velocity of 2.5 rev/s. The program utilizes all edges of the quadrature encoders, does not miss any edges at high speeds, reports 0 when the fan is unmoving, and does not report 0 at low speeds (has high resolution). \n\nOverall a success!\n\n## AI Prototype and Reflection\nThe Claude AI did not pass on the first run. The program included the header `\"stm32l4xx_hal.h\"` which was not recognized by Segger. I asked the AI to instead use `<stm32l432xx.h>`. This change did create a buildable solution. However, there was no code to show the velocity anywhere. So I prompted the AI to output the velocity using printf. \n\nThe AI actually gave me two methods: one for Hardware Encoder Mode that uses TIM2 encoder interface and no interrupts and another for Software Encoder Mode that uses the EXTI interrupts like I did. Another fun thing the AI did was also find the position not just the velocity. To keep things simple I asked just for velocity and to use Method 2.\n\n<details> \n\n<summary>Method 2: Software Encoder Mode</summary>\n\n``` \n/* Quadrature Encoder Interface for STM32L432KC\n * GPIO Interrupt Mode - Velocity Only\n * Direct register access without HAL\n */\n\n#include <stm32l432xx.h>\n#include <stdio.h>\n\n/* ============================================\n * PRINTF RETARGET FOR SWO/ITM (ST-Link)\n * ============================================ */\n\nint _write(int file, char *ptr, int len)\n{\n    for(int i = 0; i < len; i++) {\n        ITM_SendChar((*ptr++));\n    }\n    return len;\n}\n\n/* ============================================\n * GPIO INTERRUPT MODE - VELOCITY CALCULATION\n * Software quadrature decoding using EXTI interrupts\n * Connect encoder to PA0 (Channel A) and PA1 (Channel B)\n * ============================================ */\n\n#define ENCODER_A_PIN 0\n#define ENCODER_B_PIN 1\n\nvolatile int32_t encoder_count = 0;\nvolatile int32_t encoder_velocity = 0;  // counts per second\nvolatile uint8_t last_state = 0;\n\nvoid Encoder_GPIO_Init(void)\n{\n    // Enable clocks for GPIOA and SYSCFG\n    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;\n    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;\n    \n    // Configure PA0 and PA1 as inputs\n    GPIOA->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);\n    \n    // Enable pull-ups\n    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);\n    GPIOA->PUPDR |= (GPIO_PUPDR_PUPD0_0 | GPIO_PUPDR_PUPD1_0);\n    \n    // Configure EXTI for PA0 and PA1\n    SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI0 | SYSCFG_EXTICR1_EXTI1);\n    // EXTI0 and EXTI1 connected to PA0 and PA1 (value 0 = GPIOA)\n    \n    // Enable rising and falling edge triggers\n    EXTI->RTSR1 |= (EXTI_RTSR1_RT0 | EXTI_RTSR1_RT1);\n    EXTI->FTSR1 |= (EXTI_FTSR1_FT0 | EXTI_FTSR1_FT1);\n    \n    // Unmask interrupts\n    EXTI->IMR1 |= (EXTI_IMR1_IM0 | EXTI_IMR1_IM1);\n    \n    // Enable NVIC interrupts\n    NVIC_SetPriority(EXTI0_IRQn, 2);\n    NVIC_EnableIRQ(EXTI0_IRQn);\n    \n    NVIC_SetPriority(EXTI1_IRQn, 2);\n    NVIC_EnableIRQ(EXTI1_IRQn);\n    \n    // Read initial state\n    last_state = ((GPIOA->IDR & (1 << ENCODER_A_PIN)) ? 2 : 0) | \n                 ((GPIOA->IDR & (1 << ENCODER_B_PIN)) ? 1 : 0);\n}\n\nvoid Encoder_Process(void)\n{\n    uint8_t current_state = ((GPIOA->IDR & (1 << ENCODER_A_PIN)) ? 2 : 0) | \n                            ((GPIOA->IDR & (1 << ENCODER_B_PIN)) ? 1 : 0);\n    \n    // State transition table for quadrature decoding\n    int8_t direction = 0;\n    uint8_t transition = (last_state << 2) | current_state;\n    \n    switch(transition) {\n        // Clockwise transitions\n        case 0b0001: case 0b0111: case 0b1110: case 0b1000:\n            direction = 1;\n            break;\n        // Counter-clockwise transitions\n        case 0b0010: case 0b1011: case 0b1101: case 0b0100:\n            direction = -1;\n            break;\n        // Invalid or no change\n        default:\n            direction = 0;\n            break;\n    }\n    \n    encoder_count += direction;\n    last_state = current_state;\n}\n\n// EXTI0 interrupt handler (Channel A on PA0)\nvoid EXTI0_IRQHandler(void)\n{\n    if(EXTI->PR1 & EXTI_PR1_PIF0) {\n        EXTI->PR1 = EXTI_PR1_PIF0;  // Clear pending bit\n        Encoder_Process();\n    }\n}\n\n// EXTI1 interrupt handler (Channel B on PA1)\nvoid EXTI1_IRQHandler(void)\n{\n    if(EXTI->PR1 & EXTI_PR1_PIF1) {\n        EXTI->PR1 = EXTI_PR1_PIF1;  // Clear pending bit\n        Encoder_Process();\n    }\n}\n\nvoid Encoder_CalculateVelocity(void)\n{\n    static int32_t last_count = 0;\n    int32_t current_count = encoder_count;\n    \n    // Calculate change in count (delta)\n    int32_t delta = current_count - last_count;\n    \n    // Velocity in counts per second (assuming 100ms sampling = 10 Hz)\n    encoder_velocity = delta * 10;\n    \n    last_count = current_count;\n}\n\nint32_t Encoder_GetVelocity(void)\n{\n    return encoder_velocity;\n}\n\n/* ============================================\n * SYSTICK TIMER FOR VELOCITY SAMPLING\n * ============================================ */\n\nvoid SysTick_Init(uint32_t ticks)\n{\n    SysTick->LOAD = ticks - 1;\n    SysTick->VAL = 0;\n    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | \n                    SysTick_CTRL_TICKINT_Msk | \n                    SysTick_CTRL_ENABLE_Msk;\n}\n\nvoid SysTick_Handler(void)\n{\n    // Calculate velocity every 100ms\n    Encoder_CalculateVelocity();\n}\n\n/* ============================================\n * USAGE EXAMPLE\n * ============================================ */\n\n// Simple delay function (adjust based on your clock speed)\nvoid delay_ms(uint32_t ms)\n{\n    for(uint32_t i = 0; i < ms * 4000; i++) {\n        __NOP();\n    }\n}\n\nint main(void)\n{\n    // Initialize GPIO interrupt mode encoder\n    Encoder_GPIO_Init();\n    \n    // Initialize SysTick for 100ms interrupts (assuming 4MHz clock)\n    // Adjust this value based on your actual system clock\n    SysTick_Init(400000);  // 4MHz / 10 = 400000 for 100ms\n    \n    while(1) {\n        // Read and print velocity only\n        int32_t velocity = Encoder_GetVelocity();  // counts per second\n        \n        printf(\"Velocity: %ld counts/sec\\r\\n\", velocity);\n        \n        delay_ms(100);\n    }\n}\n\n```\n</details> \n\nWhen I ran this in debug mode, the velocity was output as counts per second, but did not match the expected velocities. This is likely due to the integer nature of the variables in the Claude AI. The output would jump between 10 counts/sec to -10 counts/sec and sometimes 0 counts/sec in between. However, when the motor is stationary, the code does output 0 counts/sec correctly. Overall, the Claude AI was not very successful for this prompt. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"lab5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":["cosmo","brand"],"math":{"method":"mathjax","options":{"autoNumber":"AMS"},"citations":true},"title":"Lab 5 Report","author":"Erin Wang","date":"10/8/2025"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}