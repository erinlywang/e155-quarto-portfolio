[
  {
    "objectID": "posts/week1-reflections.html",
    "href": "posts/week1-reflections.html",
    "title": "Week 1 Reflections",
    "section": "",
    "text": "This week I soldered all the components onto my development board, programmed LED0 to SW6 (S[1:0]) with an XOR gate, programmed LED1 to SW6 (S[3:2]) with an AND gate, programmed LED2 to blink at 2.4 Hz using the high frequency oscillator internal clock with a 24’bit counter, and programmed a 7-segment display to show a hexadecimal digit corresponding to SW6 (S[3:0])."
  },
  {
    "objectID": "posts/week1-reflections.html#summary",
    "href": "posts/week1-reflections.html#summary",
    "title": "Week 1 Reflections",
    "section": "",
    "text": "This week I soldered all the components onto my development board, programmed LED0 to SW6 (S[1:0]) with an XOR gate, programmed LED1 to SW6 (S[3:2]) with an AND gate, programmed LED2 to blink at 2.4 Hz using the high frequency oscillator internal clock with a 24’bit counter, and programmed a 7-segment display to show a hexadecimal digit corresponding to SW6 (S[3:0])."
  },
  {
    "objectID": "posts/week1-reflections.html#reflections-on-lab",
    "href": "posts/week1-reflections.html#reflections-on-lab",
    "title": "Week 1 Reflections",
    "section": "Reflections on Lab",
    "text": "Reflections on Lab\nThe lab was definitely difficult with learning how to use Radiant instead of Quartus Prime. I also found it tricky understanding how to program the blinking LED2 using the counter.\nI feel a lot more confident in understanding what is going on in a testbench program because before in E85 it seemed like somewhat of a black box to me.\nI’m still struggling with figuring out how to separate modules and writing testbenches for modules that don’t require a testvector file. I would like to continue strengthening my ability to write new modules and testbenches for those modules in a way that works in the overall top module. The trickiest module for this was trying to separate the clock divider for the blinking LED2 into another module. I ended up not doing a separate module because the code worked really well in the top module and I ran out of time.\nIf I have more time I would like to go back and retry making an led_blinker module that can have the HSOSC module outside of the led_blinker module and feed the internal clock int_osc into the blinking led module."
  },
  {
    "objectID": "labs/lab1/lab1.html",
    "href": "labs/lab1/lab1.html",
    "title": "Lab 1 Report",
    "section": "",
    "text": "I spent 24 hours working on this lab."
  },
  {
    "objectID": "labs/lab1/lab1.html#lab-hours",
    "href": "labs/lab1/lab1.html#lab-hours",
    "title": "Lab 1 Report",
    "section": "",
    "text": "I spent 24 hours working on this lab."
  },
  {
    "objectID": "labs/lab1/lab1.html#introduction",
    "href": "labs/lab1/lab1.html#introduction",
    "title": "Lab 1 Report",
    "section": "Introduction",
    "text": "Introduction\nLab 1 dealt with setting up and testing the FPGA including soldering all parts of the board and writing SystemVerilog code to verify the LEDs and interface with a 7-segment display on a breadboard."
  },
  {
    "objectID": "labs/lab1/lab1.html#design-and-testing-methodology",
    "href": "labs/lab1/lab1.html#design-and-testing-methodology",
    "title": "Lab 1 Report",
    "section": "Design and Testing Methodology",
    "text": "Design and Testing Methodology\n\nBlinking LED2\nThe on-board high-speed oscillator (HSOSC) from the iCE40 UltraPlus primitive library was used to generate a clock signal at 24 MHz. Then, a counter was used to divide the high frequency clock signal to drive an external LED (LED2) such that it blinks at 2.4 Hz.\n\n\n\n\n\n\nFigure 1: The calculation for the counter to make LED2 blink at 2.4 Hz.\n\n\n\nThe calculation in Figure 1 derived that the counter needed to reach 5000000 before setting the LED HIGH in order to blink the LED at 2.4 Hz with a 50% duty cycle.\n\n\nResistor choice for 7-segment Display\n\n\n\n\n\n\nFigure 2: The calculation for the 7-segment current-limiting resistors using a V_f of 2.1V from the MAN4600 datasheet.\n\n\n\nThe calculation in Figure 2 derived 1kΩ as an appropriate resistor to provide ~1.2 mA to the LED segments."
  },
  {
    "objectID": "labs/lab1/lab1.html#technical-documentation",
    "href": "labs/lab1/lab1.html#technical-documentation",
    "title": "Lab 1 Report",
    "section": "Technical Documentation",
    "text": "Technical Documentation\nThe source code for the project can be found in the associated Github repository\n\nBlock Diagram\n\n\n\n\n\n\nFigure 3: Block diagram showing the top module and the two submodules HSOSC and sevensegment.\n\n\n\nThe block diagram in Figure 3 demonstrates the overall architecture of the design. The top-level module top includes two submodules: the high-speed oscillator block (HSOSC) and the 7-segment display module (sevensegment). The programming for the leds were placed in the top module."
  },
  {
    "objectID": "labs/lab1/lab1.html#schematic",
    "href": "labs/lab1/lab1.html#schematic",
    "title": "Lab 1 Report",
    "section": "Schematic",
    "text": "Schematic\n\n\n\n\n\n\nFigure 4: Schematic of the layout including the SW6 switch. The 7-segment display shares a common anode.\n\n\n\nFigure 4 shows the physical layout of the design. An internal 100 kΩ pullup resistor was used to ensure the active low reset pin for the switches was not floating. The output 7-segment diodes were connected using a 1kΩ current-limiting resistor to ensure the output current (~1.2 mA) did not exceed the maximum output current of the FPGA I/O pins. The figure also shows which pin number corresponds to which segment (i.e. a,b,c…) of the 7-segment display.\n\n\n\n\n\n\nFigure 5: Diagram of the letter assignment for the 7-segment display.\n\n\n\nFigure 5 depicts the assignment of letters to the output display. In the program, seg[0] corresponds to a, seg[1] to b, and so on."
  },
  {
    "objectID": "labs/lab1/lab1.html#results-and-discussion",
    "href": "labs/lab1/lab1.html#results-and-discussion",
    "title": "Lab 1 Report",
    "section": "Results and Discussion",
    "text": "Results and Discussion\n\nTestbench Simulation\n\n\n\n\n\n\nFigure 6: Testbench simulation results for top module. Note the red comes from the blinking LED bit. The simulation shows outputs match expected outputs for all testvectors\n\n\n\nThe design met all intended design objectives. Figure 6 shows a screenshot of the QuestaSim simulation for the top module’s testbench tb_top. The simulated outputs of led and seg match their respective expected outputs.\n\n\n\n\n\n\nFigure 7: Testbench simulation results for sevensegment module. The simulation shows outputs match expected outputs for all testvectors\n\n\n\nFigure 7 shows a screenshot of the QuestaSim simulation for the sevensegment module’s testbench tb_sevseg. The simulated outputs of seg match the expected outputs.\nIf the design wanted to reuse the clock divider program, a separate module could be developed for the clock divider that takes the HSOSC int_osc output as an input."
  },
  {
    "objectID": "labs/lab1/lab1.html#conclusion",
    "href": "labs/lab1/lab1.html#conclusion",
    "title": "Lab 1 Report",
    "section": "Conclusion",
    "text": "Conclusion\nThe design successfully blinked LED2 using the on-board high-speed oscillator, programmed LED1 and LED0 to the given truth table corresponding to s[3:2] and s[1:0] respectively, and displayed on the 7-segment display a single hexadecimal digit corresponding to the switches s[3:0] such that each digit is unique/distinguishable from the rest."
  },
  {
    "objectID": "labs/lab1/lab1.html#ai-prototype-and-reflection",
    "href": "labs/lab1/lab1.html#ai-prototype-and-reflection",
    "title": "Lab 1 Report",
    "section": "AI Prototype and Reflection",
    "text": "AI Prototype and Reflection\nThe first run with Claude AI produced a code very similar to the one I had written for the led_blinker by toggling the led under an always_ff statement with the counter. Some key differences was that the program used the SB_HFOSC module rather than the HSOSC which was new to me and was also unrecognized by Radiant giving a “instantiating unknown module” error.\nAfter feeding the error back into the LLM, the LLM fed back to declare the primitive with blackbox attribute which is also completely new to me. However parsing this still provided an error that CLKHF_DIV is not defined in this module. The instantiation of the SB_HFOSC module seemed to run into an error where the parameter in the module was not defined when later used in the module.\nAnother key difference and something new to me was that the program used localparam int to initialize a maximum counter and the width of the counter. The width of the counter used the code $clog2(COUNTER_MAX + 1) which I have never seen.\nIf I were to use the LLM again, I would like to tell the LLM what modules to use. The issue seemed to be with SB_HFOSC so feeding the LLM explicitly to use HSOSC could be quicker to getting towards a working code. Doing this actually changed the error to duplicate module name because the LLM program was trying to delcare the HSOSC primitive. Then feeding this error the LLM replied that the error is likely due to the HSOSC module already being available and it deleted the primitive declaration. After this deletion the code synthesized with no errors!\nI think the quality of the output is quite high. Each new section of code is commented with an overarching comment of the module’s function at the top. The only thing is that the LLM can get really stuck on executing the code one way and sometimes better quality code can be written by knowing multiple avenues of which to implement the code. So feeding the desired packages or modules can be really helpful in producing successful LLM code."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "E155 Blog",
    "section": "",
    "text": "Hello Quarto\n\n\n\n\n\nWelcome to my Quarto portfolio\n\n\n\n\n\nAug 28, 2025\n\n\nErin Wang\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1 Reflections\n\n\n\n\n\nBuilding my development board and programming in Verilog\n\n\n\n\n\nAug 28, 2025\n\n\nErin Wang\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Erin Wang is a senior engineering major at Harvey Mudd College. Her interests are in robotics and mechatronics specifically for building animatronics in theme parks. One of her personal projects is to build the robot from the REPO game with 3D printed material and off-the-shelf servo motors. The link to her Github can be found here.\nAfter college, she aims to apply for Masters programs robotics, electrical engineering, or mechanical engineering. When she is not working hard in her classes, music and food fill her life. She loves to dance and sing as well as compose music, and she is always willing to try a new food place."
  }
]